{"version":3,"sources":["components/Tempelates.jsx","components/Meme.jsx","index.js"],"names":["Tempelates","props","className","tempelates","map","tempelate","index","onClick","setMeme","style","backgroundImage","url","id","Meme","useState","meme","username","password","values","data","setData","errorMsg","setErrorMsg","a","fetch","res","json","resData","console","log","error_message","error","src","alt","Array","box_count","items","placeholder","onChange","e","newValues","text","target","value","fetchMeme","fileName","xhr","XMLHttpRequest","open","responseType","onload","imageUrl","window","URL","webkitURL","createObjectURL","this","response","tag","document","createElement","href","download","body","appendChild","click","removeChild","send","forceDownload","App","setTempelates","memes","useEffect","fetchAPI","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a42dc432.chunk.js","sourcesContent":["\nconst Tempelates=(props)=>{\nreturn <div className=\"templates\">\n   {props.tempelates.map((tempelate, index) => (\n        <div key={tempelate.id} className=\"template\" \n       onClick={()=>props.setMeme(tempelate)} style={{backgroundImage:`url(${tempelate.url})`}}/>\n      ))}\n</div>\n}\n\nexport default Tempelates","import { useState } from \"react\";\n\n\nconst Meme = (props)=>{\n\n     const [data,setData]=useState(\n         {\n             id:props.meme.id,\n             username:\"sakshisingh17\",\n             password:\"memegeneratorapp\",\n             values:[]\n         }\n     )\n     const [errorMsg,setErrorMsg]=useState(\"\");\n\n     async function fetchMeme(url)\n     {\n        const res=await fetch(url)\n        const resData = await res.json()\n        console.log(resData)\n        try{\n            props.setMeme({...props.meme,url:resData.data.url});\n            setErrorMsg(resData.error_message)\n        }\n        catch(error){\n            console.log(resData.error_message)\n            setErrorMsg(resData.error_message)\n        }\n        \n     }\n     const generateMeme=()=>{\n         let url=`https://api.imgflip.com/caption_image?template_id=${data.id}&username=${data.username}&password=${data.password}`\n        data.values.map((items,index)=>{\n            url+=`&boxes[${index}][text]=${items.text}`;\n        })\n\n        fetchMeme(url)\n     }\n\n    function forceDownload(url, fileName){\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url, true);\n    xhr.responseType = \"blob\";\n    xhr.onload = function(){\n        var urlCreator = window.URL || window.webkitURL;\n        var imageUrl = urlCreator.createObjectURL(this.response);\n        var tag = document.createElement('a');\n        tag.href = imageUrl;\n        tag.download = fileName;\n        document.body.appendChild(tag);\n        tag.click();\n        document.body.removeChild(tag);\n    }\n    xhr.send();\n}\n\n    return(\n    <div className=\"memeContainer\">\n        <img src={props.meme.url} alt=\"\" className=\"meme\"/>\n        <div className=\"input-fields\">\n           {[...Array(props.meme.box_count)].map((items,index)=>(<input className=\"inputs\" key={index} placeholder={`Meme Caption ${index+1}`} onChange={(e)=>{\n               var newValues=data.values;\n               newValues[index]={text:e.target.value}\n               setData({...data,values:newValues})\n           }}/>))}\n        </div>\n        <div className=\"btns\">\n            <button className=\"choose-template buttons\" onClick={()=>props.setMeme(null)}>Choose Templates</button>\n            <button className=\"generate-meme buttons\" onClick={generateMeme}>Generate Meme</button>\n            <button className=\"buttons\" onClick={()=>forceDownload(props.meme.url,\"myMeme\")}>Download Meme</button>\n        </div>\n        <div className=\"msg\">\n            {errorMsg}\n        </div>\n       \n        \n    </div>\n    )\n}\n\nexport default Meme;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useState, useEffect } from \"react\";\nimport Tempelates from \"./components/Tempelates\";\nimport Meme from \"./components/Meme\";\nimport \"./style.css\";\n\nconst App = () => {\n  const [tempelates, setTempelates] = useState([]);\n  const [meme, setMeme] = useState(null);\n\n  async function fetchAPI() {\n    var res = await fetch(\"https://api.imgflip.com/get_memes\");\n    var data = await res.json();\n    console.log(data.data.memes);\n    setTempelates(data.data.memes);\n  }\n\n  useEffect(() => {\n    fetchAPI();\n  }, []);\n\n  return (\n    <div>\n      <h1>Meme Generator App</h1>\n      {meme === null ? (\n        <Tempelates tempelates={tempelates} setMeme={setMeme} />\n      ) : (\n        <Meme meme={meme} setMeme={setMeme} />\n      )}\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}